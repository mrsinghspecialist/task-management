{"version":3,"file":"static/js/285.4a916c66.chunk.js","mappings":"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","sources":["assets/icons/error.svg","features/CustomizedDialogBox/CustomizedDialogBox.styles.ts","features/CustomizedDialogBox/CustomizedDialogBox.tsx","components/NewTask/NewTask.tsx","components/Dashboard/Dashboard.styles.ts","components/Dashboard/Dashboard.tsx"],"sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgError(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 28,\n    height: 28,\n    viewBox: \"0 0 28 28\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M0.5 14C0.5 6.54416 6.54416 0.5 14 0.5C21.4558 0.5 27.5 6.54416 27.5 14C27.5 21.4558 21.4558 27.5 14 27.5C6.54416 27.5 0.5 21.4558 0.5 14ZM12.5 20C12.5 19.1716 13.1716 18.5 14 18.5C14.8284 18.5 15.5 19.1716 15.5 20C15.5 20.8284 14.8284 21.5 14 21.5C13.1716 21.5 12.5 20.8284 12.5 20ZM13 6.5V15.5H15V6.5H13Z\",\n    fill: \"white\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgError);\nexport default __webpack_public_path__ + \"static/media/error.36ee555b146c3ce80f61605628187720.svg\";\nexport { ForwardRef as ReactComponent };","import createStyles from \"@mui/styles/createStyles\";\r\nimport makeStyles from \"@mui/styles/makeStyles\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    dialogTitleBox: {\r\n      flexDirection: \"row\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      gap: \"12px\",\r\n    },\r\n    dialogTitle: {\r\n      backgroundColor: \"#0F1929\",\r\n      color: \"white\",\r\n      marginBottom: \"24px\",\r\n    },\r\n    dialogContent: {\r\n      backgroundColor: \"white\",\r\n      color: \"#263238\",\r\n      fontWeight: \"400\",\r\n      marginTop: \"10px\",\r\n    },\r\n    dialogActions: {\r\n      padding: \"24px\",\r\n      gap: \"12px\",\r\n    },\r\n  })\r\n);\r\nexport default useStyles;\r\n","import {\r\n  Box,\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { ReactNode } from \"react\";\r\n\r\nimport error from \"../../assets/icons/error.svg\";\r\nimport useStyles from \"./CustomizedDialogBox.styles\";\r\n\r\nexport type CustomizedDialogButtons = {\r\n  title: string;\r\n  action: () => void;\r\n  variant: \"contained\" | \"outlined\";\r\n  loading?: boolean;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const CustomizedDialogBox = (props: {\r\n  openDialogBox: boolean;\r\n  handleClose: () => void;\r\n  dialogContent: string | ReactNode;\r\n  buttons: CustomizedDialogButtons[];\r\n  dialogTitle?: string;\r\n  showCloseIcon?: boolean;\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Dialog\r\n      open={props.openDialogBox}\r\n      onClose={props.handleClose}\r\n      fullWidth\r\n      scroll=\"paper\"\r\n    >\r\n      <DialogTitle className={classes.dialogTitle}>\r\n        <Box className={classes.dialogTitleBox}>\r\n          <img src={error} width={32} height={32} alt=\"Error\" />\r\n          {props.dialogTitle ? props.dialogTitle : \"Confirmation\"}\r\n        </Box>\r\n        {props.showCloseIcon ? (\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={props.handleClose}\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: 8,\r\n              top: 8,\r\n              color: (theme) => theme.palette.grey[500],\r\n            }}\r\n          >\r\n            {/* <CloseIcon /> */}\r\n            Close\r\n          </IconButton>\r\n        ) : null}\r\n      </DialogTitle>\r\n      <DialogContent className={classes.dialogContent}>\r\n        {props.dialogContent}\r\n      </DialogContent>\r\n      <DialogActions className={classes.dialogActions}>\r\n        {props.buttons.map((value, index) => (\r\n          <Button\r\n            key={index}\r\n            disabled={value.disabled ?? false}\r\n            variant={value.variant}\r\n            size=\"medium\"\r\n            color=\"primary\"\r\n            onClick={value.action}\r\n            sx={{ textTransform: \"none\" }}\r\n          >\r\n            {value.title}\r\n          </Button>\r\n        ))}\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  selectActingProfile,\r\n  selectAllUsers,\r\n} from \"../../store/slices/profileSlice\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Task, TaskStatus } from \"../../interfaces/Task\";\r\nimport { addNewTask, updateTask } from \"../../store/slices/tasksSlice\";\r\nimport { User } from \"../../interfaces/User\";\r\n\r\ntype FormFields = {\r\n  taskTitle: string;\r\n  status: TaskStatus;\r\n  associatedUser: string;\r\n};\r\nexport const NewTask = ({\r\n  handleClose,\r\n  data,\r\n}: {\r\n  handleClose: () => void;\r\n  data?: Task;\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const actingProfile: User = useSelector(selectActingProfile);\r\n  const allUsers = useSelector(selectAllUsers);\r\n  const [formFields, setFormFields] = useState<FormFields>({\r\n    taskTitle: \"\",\r\n    status: \"Due\",\r\n    associatedUser: actingProfile.email,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setFormFields({\r\n        taskTitle: data.title,\r\n        associatedUser: data.userAssociated,\r\n        status: data.status,\r\n      });\r\n    } else {\r\n      if (actingProfile.userType === \"Regular\") {\r\n        setFormFields({\r\n          ...formFields,\r\n          associatedUser: actingProfile.email,\r\n        });\r\n      } else {\r\n        setFormFields({\r\n          ...formFields,\r\n          associatedUser: \"\",\r\n        });\r\n      }\r\n    }\r\n  }, [actingProfile.userType, data]);\r\n\r\n  const handleChange = (key: keyof FormFields, value: string) => {\r\n    setFormFields({\r\n      ...formFields,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    return Boolean(\r\n      formFields.taskTitle && formFields.status && formFields.associatedUser\r\n    );\r\n  };\r\n\r\n  const handleSave = () => {\r\n    dispatch(\r\n      addNewTask({\r\n        status: formFields.status,\r\n        title: formFields.taskTitle,\r\n        userAssociated: formFields.associatedUser,\r\n      })\r\n    );\r\n    handleClose();\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    if (data)\r\n      dispatch(\r\n        updateTask({\r\n          id: data?.id,\r\n          status: formFields.status,\r\n          title: formFields.taskTitle,\r\n          userAssociated: formFields.associatedUser,\r\n        })\r\n      );\r\n    handleClose();\r\n  };\r\n  return (\r\n    <Box\r\n      style={{\r\n        minWidth: \"500px\",\r\n        background: \"white\",\r\n        position: \"absolute\",\r\n        padding: \"30px\",\r\n        borderRadius: \"10px\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%,-50%)\",\r\n      }}\r\n    >\r\n      <Button\r\n        onClick={handleClose}\r\n        style={{ position: \"absolute\", top: \"20px\", right: \"20px \" }}\r\n      >\r\n        Close\r\n      </Button>\r\n      <h2>{data ? \"Update Task\" : \"Add New Task\"}</h2>\r\n      <Box>\r\n        <TextField\r\n          sx={{ width: \"100%\" }}\r\n          label=\"Task Title\"\r\n          type=\"type\"\r\n          variant=\"standard\"\r\n          value={formFields.taskTitle}\r\n          onChange={(e) => {\r\n            handleChange(\"taskTitle\", e.target.value);\r\n          }}\r\n        />\r\n      </Box>\r\n      <Box mt={3}>\r\n        <FormControl fullWidth>\r\n          <InputLabel id=\"status\">Status</InputLabel>\r\n          <Select\r\n            labelId=\"status\"\r\n            id=\"demo-simple-select\"\r\n            value={formFields.status}\r\n            label=\"Status\"\r\n            onChange={(e) => {\r\n              handleChange(\"status\", String(e.target.value ?? \"\"));\r\n            }}\r\n          >\r\n            <MenuItem value=\"Completed\">Completed</MenuItem>\r\n            <MenuItem value=\"Due\">Due</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Box>\r\n      {actingProfile.userType === \"Admin\" && (\r\n        <Box mt={3}>\r\n          <FormControl fullWidth>\r\n            <InputLabel id=\"status\">Users</InputLabel>\r\n            <Select\r\n              labelId=\"status\"\r\n              label=\"Status\"\r\n              value={formFields.associatedUser}\r\n              onChange={(e) => {\r\n                handleChange(\"associatedUser\", String(e.target.value ?? \"\"));\r\n              }}\r\n            >\r\n              {allUsers.map((value) => (\r\n                <MenuItem key={value.email} value={value.email}>\r\n                  {value.email}\r\n                </MenuItem>\r\n              ))}\r\n            </Select>\r\n          </FormControl>\r\n        </Box>\r\n      )}\r\n\r\n      <Box sx={{ display: \"flex\", gap: \"10px\", marginTop: \"30px\" }}>\r\n        {data ? (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleUpdate}\r\n            disabled={!validateForm()}\r\n          >\r\n            Update\r\n          </Button>\r\n        ) : (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleSave}\r\n            disabled={!validateForm()}\r\n          >\r\n            Save\r\n          </Button>\r\n        )}\r\n        <Button variant=\"outlined\" onClick={handleClose}>\r\n          Cancel\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n","import { Theme } from \"@mui/material/styles\";\r\nimport { createStyles, makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    dashboardContainer: {\r\n      padding: \"40px\",\r\n      width: \"100%\",\r\n    },\r\n    heading: {\r\n      float: \"left\",\r\n      marginBottom: \"15px\",\r\n    },\r\n    floatRight: {\r\n      float: \"right\",\r\n    },\r\n    tableContainer: {\r\n      width: \"100%\",\r\n    },\r\n    dataGrid: {\r\n      \"& .MuiDataGrid-virtualScroller\": {\r\n        minHeight: \"100px\",\r\n      },\r\n    },\r\n  })\r\n);\r\nexport default useStyles;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { selectActingProfile } from \"../../store/slices/profileSlice\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Task } from \"../../interfaces/Task\";\r\nimport { Box, Button, Modal } from \"@mui/material\";\r\nimport { CustomizedDialogBox } from \"../../features/CustomizedDialogBox/CustomizedDialogBox\";\r\nimport { deleteTask, selectAllTasks } from \"../../store/slices/tasksSlice\";\r\nimport { NewTask } from \"../NewTask/NewTask\";\r\nimport { DataGrid } from \"@mui/x-data-grid\";\r\nimport useStyles from \"./Dashboard.styles\";\r\nimport React from \"react\";\r\n\r\nconst Dashboard = () => {\r\n  const actingProfile = useSelector(selectActingProfile);\r\n  const tasksList = useSelector(selectAllTasks);\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  const [openModal, setOpenModal] = useState<boolean>(false);\r\n  const [selectedTask, setSelectedTask] = useState<Task>();\r\n  const [openNewTaskModal, setOpenNewTaskModal] = useState<boolean>(false);\r\n\r\n  const [tasks, setTasks] = useState<Task[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (actingProfile.userType !== \"Admin\") {\r\n      setTasks(\r\n        tasksList.filter(\r\n          (value) => value.userAssociated === actingProfile.email\r\n        )\r\n      );\r\n    } else {\r\n      setTasks(tasksList);\r\n    }\r\n  }, [actingProfile, tasksList]);\r\n\r\n  if (actingProfile.email === \"\") {\r\n    return <Navigate to={\"/login\"} />;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.dashboardContainer}>\r\n      <h2 className={classes.heading}>Dashboard</h2>\r\n      <Button\r\n        variant=\"contained\"\r\n        className={classes.floatRight}\r\n        onClick={() => setOpenNewTaskModal(true)}\r\n      >\r\n        Add New\r\n      </Button>\r\n      <div className={classes.tableContainer}>\r\n        <br />\r\n        <div style={{ marginTop: \"60px\" }}>\r\n          <DataGrid\r\n            rows={tasks}\r\n            className={classes.dataGrid}\r\n            rowSelection={false}\r\n            columns={\r\n              actingProfile.userType === \"Regular\"\r\n                ? [\r\n                    {\r\n                      headerName: \"Title\",\r\n                      field: \"title\",\r\n                      width: 600,\r\n                      align: \"center\",\r\n                      headerAlign: \"center\",\r\n                    },\r\n                    {\r\n                      headerName: \"Status\",\r\n                      field: \"status\",\r\n                      width: 500,\r\n                      sortable: true,\r\n                      align: \"center\",\r\n                      headerAlign: \"center\",\r\n                    },\r\n                    {\r\n                      headerName: \"\",\r\n                      field: \"id\",\r\n                      width: 500,\r\n                      align: \"center\",\r\n                      renderCell(params) {\r\n                        return (\r\n                          <>\r\n                            <Box>\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                                onClick={() => {\r\n                                  setSelectedTask(params.row);\r\n                                  setOpenNewTaskModal(true);\r\n                                }}\r\n                              >\r\n                                Edit\r\n                              </Button>\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                onClick={() => {\r\n                                  setSelectedTask(params.row);\r\n                                  setOpenModal(true);\r\n                                }}\r\n                              >\r\n                                Delete\r\n                              </Button>\r\n                            </Box>\r\n                          </>\r\n                        );\r\n                      },\r\n                    },\r\n                  ]\r\n                : [\r\n                    {\r\n                      headerName: \"Title\",\r\n                      field: \"title\",\r\n                      width: 400,\r\n                      align: \"center\",\r\n                      headerAlign: \"center\",\r\n                    },\r\n                    {\r\n                      headerName: \"Status\",\r\n                      field: \"status\",\r\n                      width: 300,\r\n                      sortable: true,\r\n                      align: \"center\",\r\n                      headerAlign: \"center\",\r\n                    },\r\n                    {\r\n                      headerName: \"Users\",\r\n                      field: \"userAssociated\",\r\n                      width: 500,\r\n                      sortable: true,\r\n                      align: \"center\",\r\n                      headerAlign: \"center\",\r\n                    },\r\n                    {\r\n                      headerName: \"\",\r\n                      field: \"id\",\r\n                      width: 500,\r\n                      align: \"center\",\r\n                      renderCell(params) {\r\n                        return (\r\n                          <>\r\n                            <Box>\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                style={{ marginRight: \"20px\" }}\r\n                                onClick={() => {\r\n                                  setSelectedTask(params.row);\r\n                                  setOpenNewTaskModal(true);\r\n                                }}\r\n                              >\r\n                                Edit\r\n                              </Button>\r\n                              <Button\r\n                                variant=\"contained\"\r\n                                onClick={() => {\r\n                                  setSelectedTask(params.row);\r\n                                  setOpenModal(true);\r\n                                }}\r\n                              >\r\n                                Delete\r\n                              </Button>\r\n                            </Box>\r\n                          </>\r\n                        );\r\n                      },\r\n                    },\r\n                  ]\r\n            }\r\n            initialState={{\r\n              pagination: {\r\n                paginationModel: { page: 0, pageSize: 5 },\r\n              },\r\n            }}\r\n            pageSizeOptions={[5, 10]}\r\n          />\r\n        </div>\r\n      </div>\r\n      <CustomizedDialogBox\r\n        openDialogBox={openModal}\r\n        handleClose={() => setOpenModal(false)}\r\n        dialogContent={\"Are you sure ?\"}\r\n        buttons={[\r\n          {\r\n            title: \"OK\",\r\n            variant: \"contained\",\r\n            action() {\r\n              if (selectedTask) dispatch(deleteTask(selectedTask?.id));\r\n              setOpenModal(false);\r\n              setSelectedTask(undefined);\r\n            },\r\n          },\r\n          {\r\n            title: \"Cancel\",\r\n            variant: \"outlined\",\r\n            action() {\r\n              setSelectedTask(undefined);\r\n              setOpenModal(false);\r\n            },\r\n          },\r\n        ]}\r\n      />\r\n      <Modal open={openNewTaskModal}>\r\n        <NewTask\r\n          data={selectedTask}\r\n          handleClose={() => {\r\n            setOpenNewTaskModal(false);\r\n            setSelectedTask(undefined);\r\n          }}\r\n        />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["makeStyles","createStyles","dialogTitleBox","flexDirection","display","alignItems","gap","dialogTitle","backgroundColor","color","marginBottom","dialogContent","fontWeight","marginTop","dialogActions","padding","CustomizedDialogBox","props","classes","useStyles","_jsxs","Dialog","open","openDialogBox","onClose","handleClose","fullWidth","scroll","children","DialogTitle","className","Box","_jsx","src","error","width","height","alt","showCloseIcon","IconButton","onClick","sx","position","right","top","theme","palette","grey","DialogContent","DialogActions","buttons","map","value","index","_value$disabled","Button","disabled","variant","size","action","textTransform","title","NewTask","_ref","data","dispatch","useDispatch","actingProfile","useSelector","selectActingProfile","allUsers","selectAllUsers","formFields","setFormFields","useState","taskTitle","status","associatedUser","email","useEffect","userAssociated","userType","handleChange","key","validateForm","Boolean","style","minWidth","background","borderRadius","left","transform","TextField","label","type","onChange","e","target","mt","FormControl","InputLabel","id","Select","labelId","_e$target$value","String","MenuItem","_e$target$value2","handleUpdate","updateTask","handleSave","addNewTask","dashboardContainer","heading","float","floatRight","tableContainer","dataGrid","minHeight","Dashboard","tasksList","selectAllTasks","openModal","setOpenModal","selectedTask","setSelectedTask","openNewTaskModal","setOpenNewTaskModal","tasks","setTasks","filter","Navigate","to","DataGrid","rows","rowSelection","columns","headerName","field","align","headerAlign","sortable","renderCell","params","_Fragment","marginRight","row","initialState","pagination","paginationModel","page","pageSize","pageSizeOptions","deleteTask","undefined","Modal"],"sourceRoot":""}